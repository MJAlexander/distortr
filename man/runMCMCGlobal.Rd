% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runmcmcglobal.R
\name{runMCMCGlobal}
\alias{runMCMCGlobal}
\title{Run MCMC estimation for hierarichal models with multiple countries}
\usage{
runMCMCGlobal(method, input.data, order = NULL, matern.cov = TRUE,
  cs.arma = NULL, cs.smoothing = TRUE, time.trend = FALSE,
  nserror.estimated = TRUE, nchains = 3, nburnin = 1000, niter = 2000,
  nthin = 1, model.file.path = NULL, model.save.file.path = "R/model.txt")
}
\arguments{
\item{method}{The method of smoothing to implement (choices: ar, arma, splines, gp)}

\item{input.data}{List of required input data. See \code{processData}, \code{getSplinesData} and \code{getGPData} to get required data in compatible form.}

\item{order}{The order of splines penalization (either 1 or 2)}

\item{matern.cov}{Whether or not to use Matern covariance function. Default is \code{TRUE}.}

\item{cs.arma}{whether ARMA parameter(s) are country specific. If `FALSE`, parameter is global.}

\item{cs.smoothing}{whether smoothing paramter is country specific. If `FALSE`, smoothing parameter is global.}

\item{time.trend}{if `TRUE` a linear time trend is estimated.}

\item{nserror.estimated}{whether to estimate non-sampling error. IF `FALSE`, fixed sampling error is inputted.}

\item{nchains}{Number of MCMC chains}

\item{nburnin}{Number of iterations to throw away as burn in.}

\item{niter}{Number of total iterations.}

\item{nthin}{Degree of thinning of MCMC chains}

\item{model.file.path}{Text file which contains the model to be fitted. If \code{NULL}, the text file is drawn from the \code{models} folder.}

\item{model.save.file.path}{Path to save model, if written.}
}
\value{
A JAGS model object
}
\description{
Run MCMC estimation of time series data for multiple countries using JAGS.
}
\examples{
nyears <- 100
prop.sample <- 0.7
obs.err <- TRUE
sigma.y <- 0.5
seed <- 123
method <- 'splines'
params <- list(sigma.alpha = 1, order = 1)
df <- simulateFluctuations(nyears, prop.sample, method, params, obs.err, sigma.y)
df$se <- 1
mod <- runMCMC(input.data = df, nyears = 100, method = "splines", order = 1,
nchains = 4, nburnin = 100, niter = 100+3000, nthin = 3)
}
\seealso{
\code{\link{processData}, \link{getSplinesData}, \link{getGPData}}
}
